//Global selections and variables
const colorDivs = document.querySelectorAll(".color")
const generateBtn = document.querySelector(".generate")
const sliders = document.querySelectorAll('input[type="range"]')
const currentHexes = document.querySelectorAll(".color h2")
const popup = document.querySelector('.copy-container')
const adjustButtons = document.querySelectorAll('.adjust')
const lockButtons = document.querySelectorAll('.lock')
const closeAdjustments = document.querySelectorAll('.close-adjustment')
const sliderContainers = document.querySelectorAll('.sliders')
let initialColors
let savedPalettes = []

//Event Listeners
sliders.forEach(slider => {
    slider.addEventListener('input', hslControls)
})

colorDivs.forEach((div, index) => {
    div.addEventListener('change', () => {
        updateColorText(index)
    })
})

currentHexes.forEach(hex => {
    hex.addEventListener('click', () => {
        copyToClipboard(hex)
    })
})

popup.addEventListener('transitionend', () => {
    const popupBox = popup.children[0]
    popupBox.classList.remove('active')
    popup.classList.remove('active')
})

adjustButtons.forEach((adjustButton, index) => {
    adjustButton.addEventListener('click', () => {
        openAdjustmentPanel(index)
    })
})

lockButtons.forEach((lockButton, index) => {
    lockButton.addEventListener('click', () => {
        toggleLock(index)
    })
})

closeAdjustments.forEach((closeAdjustment, index) => {
    closeAdjustment.addEventListener('click', () => {
        closeAdjustmentPanel(index)
    })
})

generateBtn.addEventListener('click', randomColors)

//Color Generator
function generateHexes() {
    // Using custom calculations to generate the hex value
    // const possibleValues = "0123456789ABCDEF"
    // let hexValue = "#"
    // for (let i = 0; i < 6; i++) {
    //     hexValue += possibleValues[Math.floor(Math.random()*16)]
    // }
    // return hexValue

    //Using chroma library to generate the hex value
    return chroma.random()
}

function colorizeSliders(color, hueDiv, brightnessDiv, saturationDiv) {

    //Change Brightness
    const midBrightness = color.set('hsl.l', 0.5)
    const brightnessScale = chroma.scale(['black', midBrightness, 'white'])
    brightnessDiv.style.backgroundImage = `linear-gradient( to right, ${brightnessScale(0)}, ${brightnessScale(0.5)}, ${brightnessScale(1)})`

    //Change  Hue
    hueDiv.style.backgroundImage = `linear-gradient(to right, rgb(204, 75, 75), rgb(204,204 ,75),rgb(75, 204, 75),rgb(75, 204, 204),rgb(75,75,204),rgb(204,75,204),rgb(204,75,75))`

    //Change Saturation
    const noSaturation = color.set('hsl.s', 0)
    const fullSaturation = color.set('hsl.s', 1)
    const saturationScale = chroma.scale([noSaturation, color, fullSaturation])
    saturationDiv.style.backgroundImage = `linear-gradient(to right, ${saturationScale(0)}, ${saturationScale(1)})`
}

function randomColors() {
    initialColors = []
    colorDivs.forEach(colorDiv => {
        const randomColor = generateHexes()
        const hexText = colorDiv.children[0]

        if (colorDiv.classList.contains('locked')) {
            initialColors.push(hexText.innerText)
            return
        }
        initialColors.push(chroma(randomColor).hex())

        //Change the text and background to the randomColor generated by chroma
        hexText.innerText = randomColor
        colorDiv.style.backgroundColor = randomColor

        //Check the contrast of the hexText
        checkTextContrast(hexText, randomColor)

        //Initialise Colorize Sliders
        const sliders = colorDiv.querySelectorAll('.sliders input')
        const hue = sliders[0]
        const brightness = sliders[1]
        const saturation = sliders[2]
        colorizeSliders(chroma(randomColor), hue, brightness, saturation)

        initializeSliderDots(colorDiv)
    })

    adjustButtons.forEach((button, index) => {
        checkTextContrast(button, initialColors[index])
        checkTextContrast(lockButtons[index], initialColors[index])
    })
}

function initializeSliderDots(colorDiv) {
    const sliders = colorDiv.querySelectorAll('.sliders input')
    sliders.forEach(slider => {
        const index = slider.getAttribute('data-hue') ||
            slider.getAttribute('data-sat') ||
            slider.getAttribute('data-bright')
        const color = initialColors[index]

        if (slider.name === 'hue') {
            const hue = chroma(color).get('hsl.h')
            slider.value = Math.floor(hue)
        } else if (slider.name === 'saturation') {
            const saturation = chroma(color).get('hsl.s')
            slider.value = Math.floor(saturation * 100) / 100
        } else if (slider.name === 'brightness') {
            const light = chroma(color).get('hsl.l')
            slider.value = Math.floor(light * 100) / 100
        }
    })
}

function checkTextContrast(element, color) {
    if (chroma(color).luminance() > 0.5) {
        element.style.color = 'black'
    } else {
        element.style.color = 'white'
    }
}

function hslControls(event) {
    const index = event.target.getAttribute('data-hue') ||
        event.target.getAttribute('data-bright') ||
        event.target.getAttribute('data-sat')

    // const color = colorDivs[index].querySelector('h2').innerText
    const color = initialColors[index]
    const sliders = event.target.parentElement.querySelectorAll("input[type='range']")
    const hue = sliders[0]
    const brightness = sliders[1]
    const saturation = sliders[2]

    let newColor = chroma(color)
        .set('hsl.h', hue.value)
        .set('hsl.s', saturation.value)
        .set('hsl.l', brightness.value)
    colorDivs[index].style.backgroundColor = newColor

    //Colorize the sliders
    colorizeSliders(newColor, hue, brightness, saturation)
}

function updateColorText(index) {
    const currentDiv = colorDivs[index]
    const bgColor = chroma(currentDiv.style.backgroundColor)
    const icons = currentDiv.querySelectorAll('.controls button')
    const textHex = currentDiv.querySelector('h2')
    textHex.innerText = bgColor.hex()
    checkTextContrast(textHex, bgColor)
    for (icon of icons) {
        checkTextContrast(icon, bgColor)
    }
}

function copyToClipboard(hex) {
    const element = document.createElement('textarea')
    element.value = hex.innerText
    document.body.appendChild(element)
    element.select()
    document.execCommand('copy')
    document.body.removeChild(element)

    //Popup animation
    const popupBox = popup.children[0]
    popup.classList.toggle('active')
    popupBox.classList.toggle('active')
}

function openAdjustmentPanel(index) {
    sliderContainers[index].classList.toggle('active')
}

function closeAdjustmentPanel(index) {
    sliderContainers[index].classList.remove('active')
}

function toggleLock(index) {
    colorDivs[index].classList.toggle('locked')
    lockButtons[index].children[0].classList.toggle('fa-lock-open')
    lockButtons[index].children[0].classList.toggle('fa-lock')
}

//Save to palette and local storage
const saveBtn = document.querySelector('.save')
const submitSave = document.querySelector('.submit-save')
const closeSave = document.querySelector('.close-save')
const saveContainer = document.querySelector('.save-container')
const saveInput = document.querySelector('.save-container input')
const libraryContainer = document.querySelector(".library-container");
const libraryBtn = document.querySelector(".library");
const closeLibraryBtn = document.querySelector(".close-library");

//Event listener
saveBtn.addEventListener('click', openPalette)
closeSave.addEventListener('click', closePalette)
submitSave.addEventListener('click', savePalette)
libraryBtn.addEventListener('click', openLibrary)
closeLibraryBtn.addEventListener('click', closeLibrary)

function openPalette() {
    const popup = saveContainer.children[0]
    saveContainer.classList.add('active')
    popup.classList.add('active')
}

function closePalette() {
    const popup = saveContainer.children[0]
    saveContainer.classList.remove('active')
    popup.classList.add('remove')
}

function savePalette() {
    closePalette()
    const name = saveInput.value
    const colors = []
    currentHexes.forEach(hex => {
        colors.push(hex.innerText)
    })

    //Create an object of the palette
    let paletteNr = savedPalettes.length
    const paletteObject = {name, colors, nr: paletteNr}
    savedPalettes.push(paletteObject)

    //Store the palette to local storage
    saveToLocal(paletteObject)
    saveInput.value = ''

    //Generate the palette for Library
    const palette = document.createElement("div");
    palette.classList.add("custom-palette");

    const title = document.createElement("h4");
    title.innerText = paletteObject.name;

    const preview = document.createElement("div");
    preview.classList.add("small-preview");

    paletteObject.colors.forEach(smallColor => {
        const smallDiv = document.createElement("div");
        smallDiv.style.backgroundColor = smallColor;
        preview.appendChild(smallDiv);
    });

    const paletteBtn = document.createElement("button");
    paletteBtn.classList.add("pick-palette-btn");
    paletteBtn.classList.add(paletteObject.nr);
    paletteBtn.innerText = "Select";

    //Append to library
    palette.appendChild(title)
    palette.appendChild(preview)
    palette.appendChild(paletteBtn)
    libraryContainer.children[0].appendChild(palette)
}

function openLibrary() {
    const popup = libraryContainer.children[0]
    libraryContainer.classList.add('active')
    popup.classList.add('active')
}

function closeLibrary() {
    const popup = libraryContainer.children[0]
    libraryContainer.classList.remove('active')
    popup.classList.add('remove')
}

function saveToLocal(paletteObject) {
    let localPalettes;
    if (localStorage.getItem('palettes') === null)
        localPalettes = []
    else
        localPalettes = JSON.parse(localStorage.getItem('palettes'))

    localPalettes.push(paletteObject)
    localStorage.setItem('palettes', JSON.stringify(localPalettes))
}

randomColors()